{"version":3,"file":"tonal.min.js","sources":["../../core/dist/index.esnext.js","../../abc-notation/dist/index.esnext.js","../../array/dist/index.esnext.js","../../pcset/dist/index.esnext.js","../../chord-dictionary/dist/index.esnext.js","../../scale-dictionary/dist/index.esnext.js","../../chord/dist/index.esnext.js","../../interval/dist/index.esnext.js","../../midi/dist/index.esnext.js","../../note/dist/index.esnext.js","../../roman-numeral/dist/index.esnext.js","../../key/dist/index.esnext.js","../../mode/dist/index.esnext.js","../../progression/dist/index.esnext.js","../../range/dist/index.esnext.js","../../scale/dist/index.esnext.js","../dist/index.es5.js"],"sourcesContent":["function isNamed(src) {\r\n    return typeof src === \"object\" && typeof src.name === \"string\";\r\n}\n\nfunction isPitch(pitch) {\r\n    return (typeof pitch === \"object\" &&\r\n        typeof pitch.step === \"number\" &&\r\n        typeof pitch.alt === \"number\");\r\n}\r\n// The nuuber of fifths of [C, D, E, F, G, A, B]\r\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\r\n// The number of octaves it span each step\r\nconst STEPS_TO_OCTS = FIFTHS.map((fifths) => Math.floor((fifths * 7) / 12));\r\nfunction encode(pitch) {\r\n    const { step, alt, oct, dir = 1 } = pitch;\r\n    const f = FIFTHS[step] + 7 * alt;\r\n    if (oct === undefined) {\r\n        return [dir * f];\r\n    }\r\n    const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\r\n    return [dir * f, dir * o];\r\n}\r\n// We need to get the steps from fifths\r\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\r\n// We add 1 to fifths to avoid negative numbers, so:\r\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\r\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\r\nfunction decode(coord) {\r\n    const [f, o, dir] = coord;\r\n    const step = FIFTHS_TO_STEPS[unaltered(f)];\r\n    const alt = Math.floor((f + 1) / 7);\r\n    if (o === undefined) {\r\n        return { step, alt, dir };\r\n    }\r\n    const oct = o + 4 * alt + STEPS_TO_OCTS[step];\r\n    return { step, alt, oct, dir };\r\n}\r\n// Return the number of fifths as if it were unaltered\r\nfunction unaltered(f) {\r\n    const i = (f + 1) % 7;\r\n    return i < 0 ? 7 + i : i;\r\n}\n\nconst NoNote = { empty: true, name: \"\", pc: \"\", acc: \"\" };\r\nconst cache = new Map();\r\nconst fillStr = (s, n) => Array(n + 1).join(s);\r\nconst stepToLetter = (step) => \"CDEFGAB\".charAt(step);\r\nconst altToAcc = (alt) => alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\r\nconst accToAlt = (acc) => acc[0] === \"b\" ? -acc.length : acc.length;\r\n/**\r\n * Given a note literal (a note name or a note object), returns the Note object\r\n * @example\r\n * note('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\r\n */\r\nfunction note(src) {\r\n    const cached = cache.get(src);\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    const value = typeof src === \"string\"\r\n        ? parse(src)\r\n        : isPitch(src)\r\n            ? note(pitchName(src))\r\n            : isNamed(src)\r\n                ? note(src.name)\r\n                : NoNote;\r\n    cache.set(src, value);\r\n    return value;\r\n}\r\nconst REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\r\n/**\r\n * @private\r\n */\r\nfunction tokenizeNote(str) {\r\n    const m = REGEX.exec(str);\r\n    return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction coordToNote(noteCoord) {\r\n    return note(decode(noteCoord));\r\n}\r\nconst SEMI = [0, 2, 4, 5, 7, 9, 11];\r\nfunction parse(noteName) {\r\n    const tokens = tokenizeNote(noteName);\r\n    if (tokens[0] === \"\" || tokens[3] !== \"\") {\r\n        return NoNote;\r\n    }\r\n    const letter = tokens[0];\r\n    const acc = tokens[1];\r\n    const octStr = tokens[2];\r\n    const step = (letter.charCodeAt(0) + 3) % 7;\r\n    const alt = accToAlt(acc);\r\n    const oct = octStr.length ? +octStr : undefined;\r\n    const coord = encode({ step, alt, oct });\r\n    const name = letter + acc + octStr;\r\n    const pc = letter + acc;\r\n    const chroma = (SEMI[step] + alt + 120) % 12;\r\n    const o = oct === undefined ? -100 : oct;\r\n    const height = SEMI[step] + alt + 12 * (o + 1);\r\n    const midi = height >= 0 && height <= 127 ? height : null;\r\n    const freq = oct === undefined ? null : Math.pow(2, (height - 69) / 12) * 440;\r\n    return {\r\n        empty: false,\r\n        acc,\r\n        alt,\r\n        chroma,\r\n        coord,\r\n        freq,\r\n        height,\r\n        letter,\r\n        midi,\r\n        name,\r\n        oct,\r\n        pc,\r\n        step\r\n    };\r\n}\r\nfunction pitchName(props) {\r\n    const { step, alt, oct } = props;\r\n    const letter = stepToLetter(step);\r\n    if (!letter) {\r\n        return \"\";\r\n    }\r\n    const pc = letter + altToAcc(alt);\r\n    return oct || oct === 0 ? pc + oct : pc;\r\n}\n\nconst NoInterval = { empty: true, name: \"\", acc: \"\" };\r\n// shorthand tonal notation (with quality after number)\r\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\r\n// standard shorthand notation (with quality before number)\r\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\r\nconst REGEX$1 = new RegExp(\"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\");\r\n/**\r\n * @private\r\n */\r\nfunction tokenizeInterval(str) {\r\n    const m = REGEX$1.exec(`${str}`);\r\n    if (m === null) {\r\n        return [\"\", \"\"];\r\n    }\r\n    return m[1] ? [m[1], m[2]] : [m[4], m[3]];\r\n}\r\nconst cache$1 = {};\r\n/**\r\n * Get interval properties. It returns an object with:\r\n *\r\n * - name: the interval name\r\n * - num: the interval number\r\n * - type: 'perfectable' or 'majorable'\r\n * - q: the interval quality (d, m, M, A)\r\n * - dir: interval direction (1 ascending, -1 descending)\r\n * - simple: the simplified number\r\n * - semitones: the size in semitones\r\n * - chroma: the interval chroma\r\n *\r\n * @param {string} interval - the interval name\r\n * @return {Object} the interval properties\r\n *\r\n * @example\r\n * import { interval } from '@tonaljs/core'\r\n * interval('P5').semitones // => 7\r\n * interval('m3').type // => 'majorable'\r\n */\r\nfunction interval(src) {\r\n    return typeof src === \"string\"\r\n        ? cache$1[src] || (cache$1[src] = parse$1(src))\r\n        : isPitch(src)\r\n            ? interval(pitchName$1(src))\r\n            : isNamed(src)\r\n                ? interval(src.name)\r\n                : NoInterval;\r\n}\r\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\r\nconst TYPES = \"PMMPPMM\";\r\nfunction parse$1(str) {\r\n    const tokens = tokenizeInterval(str);\r\n    if (tokens[0] === \"\") {\r\n        return NoInterval;\r\n    }\r\n    const num = +tokens[0];\r\n    const q = tokens[1];\r\n    const step = (Math.abs(num) - 1) % 7;\r\n    const t = TYPES[step];\r\n    if (t === \"M\" && q === \"P\") {\r\n        return NoInterval;\r\n    }\r\n    const type = t === \"M\" ? \"majorable\" : \"perfectable\";\r\n    const name = \"\" + num + q;\r\n    const dir = num < 0 ? -1 : 1;\r\n    const simple = num === 8 || num === -8 ? num : dir * (step + 1);\r\n    const alt = qToAlt(type, q);\r\n    const oct = Math.floor((Math.abs(num) - 1) / 7);\r\n    const semitones = dir * (SIZES[step] + alt + 12 * oct);\r\n    const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\r\n    const coord = encode({ step, alt, oct, dir });\r\n    return {\r\n        empty: false,\r\n        name,\r\n        num,\r\n        q,\r\n        step,\r\n        alt,\r\n        dir,\r\n        type,\r\n        simple,\r\n        semitones,\r\n        chroma,\r\n        coord,\r\n        oct\r\n    };\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction coordToInterval(coord) {\r\n    const [f, o = 0] = coord;\r\n    const isDescending = f * 7 + o * 12 < 0;\r\n    const ivl = isDescending ? [-f, -o, -1] : [f, o, 1];\r\n    return interval(decode(ivl));\r\n}\r\nfunction qToAlt(type, q) {\r\n    return (q === \"M\" && type === \"majorable\") ||\r\n        (q === \"P\" && type === \"perfectable\")\r\n        ? 0\r\n        : q === \"m\" && type === \"majorable\"\r\n            ? -1\r\n            : /^A+$/.test(q)\r\n                ? q.length\r\n                : /^d+$/.test(q)\r\n                    ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\r\n                    : 0;\r\n}\r\n// return the interval name of a pitch\r\nfunction pitchName$1(props) {\r\n    const { step, alt, oct = 0, dir } = props;\r\n    if (!dir) {\r\n        return \"\";\r\n    }\r\n    const num = step + 1 + 7 * oct;\r\n    const d = dir < 0 ? \"-\" : \"\";\r\n    const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\r\n    const name = d + num + altToQ(type, alt);\r\n    return name;\r\n}\r\nconst fillStr$1 = (s, n) => Array(Math.abs(n) + 1).join(s);\r\nfunction altToQ(type, alt) {\r\n    if (alt === 0) {\r\n        return type === \"majorable\" ? \"M\" : \"P\";\r\n    }\r\n    else if (alt === -1 && type === \"majorable\") {\r\n        return \"m\";\r\n    }\r\n    else if (alt > 0) {\r\n        return fillStr$1(\"A\", alt);\r\n    }\r\n    else {\r\n        return fillStr$1(\"d\", type === \"perfectable\" ? alt : alt + 1);\r\n    }\r\n}\n\n/**\r\n * Transpose a note by an interval.\r\n *\r\n * @param {string} note - the note or note name\r\n * @param {string} interval - the interval or interval name\r\n * @return {string} the transposed note name or empty string if not valid notes\r\n * @example\r\n * import { tranpose } from \"@tonaljs/core\"\r\n * transpose(\"d3\", \"3M\") // => \"F#3\"\r\n * transpose(\"D\", \"3M\") // => \"F#\"\r\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(pc => transpose(pc, \"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\r\n */\r\nfunction transpose(noteName, intervalName) {\r\n    const note$1 = note(noteName);\r\n    const interval$1 = interval(intervalName);\r\n    if (note$1.empty || interval$1.empty) {\r\n        return \"\";\r\n    }\r\n    const noteCoord = note$1.coord;\r\n    const intervalCoord = interval$1.coord;\r\n    const tr = noteCoord.length === 1\r\n        ? [noteCoord[0] + intervalCoord[0]]\r\n        : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];\r\n    return coordToNote(tr).name;\r\n}\r\n/**\r\n * Find the interval distance between two notes or coord classes.\r\n *\r\n * To find distance between coord classes, both notes must be coord classes and\r\n * the interval is always ascending\r\n *\r\n * @param {Note|string} from - the note or note name to calculate distance from\r\n * @param {Note|string} to - the note or note name to calculate distance to\r\n * @return {string} the interval name or empty string if not valid notes\r\n *\r\n */\r\nfunction distance(fromNote, toNote) {\r\n    const from = note(fromNote);\r\n    const to = note(toNote);\r\n    if (from.empty || to.empty) {\r\n        return \"\";\r\n    }\r\n    const fcoord = from.coord;\r\n    const tcoord = to.coord;\r\n    const fifths = tcoord[0] - fcoord[0];\r\n    const octs = fcoord.length === 2 && tcoord.length === 2\r\n        ? tcoord[1] - fcoord[1]\r\n        : -Math.floor((fifths * 7) / 12);\r\n    return coordToInterval([fifths, octs]).name;\r\n}\n\nexport { accToAlt, altToAcc, coordToInterval, coordToNote, decode, distance, encode, interval, isNamed, isPitch, note, stepToLetter, tokenizeInterval, tokenizeNote, transpose };\n//# sourceMappingURL=index.esnext.js.map\n","import { note, transpose as transpose$1 } from '@tonaljs/core';\n\nconst fillStr = (character, times) => Array(times + 1).join(character);\r\nconst REGEX = /^(_{1,}|=|\\^{1,}|)([abcdefgABCDEFG])([,']*)$/;\r\nfunction tokenize(str) {\r\n    const m = REGEX.exec(str);\r\n    if (!m) {\r\n        return [\"\", \"\", \"\"];\r\n    }\r\n    return [m[1], m[2], m[3]];\r\n}\r\n/**\r\n * Convert a (string) note in ABC notation into a (string) note in scientific notation\r\n *\r\n * @example\r\n * abcToScientificNotation(\"c\") // => \"C5\"\r\n */\r\nfunction abcToScientificNotation(str) {\r\n    const [acc, letter, oct] = tokenize(str);\r\n    if (letter === \"\") {\r\n        return \"\";\r\n    }\r\n    let o = 4;\r\n    for (let i = 0; i < oct.length; i++) {\r\n        o += oct.charAt(i) === \",\" ? -1 : 1;\r\n    }\r\n    const a = acc[0] === \"_\"\r\n        ? acc.replace(/_/g, \"b\")\r\n        : acc[0] === \"^\"\r\n            ? acc.replace(/\\^/g, \"#\")\r\n            : \"\";\r\n    return letter.charCodeAt(0) > 96\r\n        ? letter.toUpperCase() + a + (o + 1)\r\n        : letter + a + o;\r\n}\r\n/**\r\n * Convert a (string) note in scientific notation into a (string) note in ABC notation\r\n *\r\n * @example\r\n * scientificToAbcNotation(\"C#4\") // => \"^C\"\r\n */\r\nfunction scientificToAbcNotation(str) {\r\n    const n = note(str);\r\n    if (n.empty || !n.oct) {\r\n        return \"\";\r\n    }\r\n    const { letter, acc, oct } = n;\r\n    const a = acc[0] === \"b\" ? acc.replace(/b/g, \"_\") : acc.replace(/#/g, \"^\");\r\n    const l = oct > 4 ? letter.toLowerCase() : letter;\r\n    const o = oct === 5 ? \"\" : oct > 4 ? fillStr(\"'\", oct - 5) : fillStr(\",\", 4 - oct);\r\n    return a + l + o;\r\n}\r\nfunction transpose(note, interval) {\r\n    return scientificToAbcNotation(transpose$1(abcToScientificNotation(note), interval));\r\n}\n\nexport { abcToScientificNotation, scientificToAbcNotation, tokenize, transpose };\n//# sourceMappingURL=index.esnext.js.map\n","import { note } from '@tonaljs/core';\n\n// ascending range\r\nfunction ascR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = n + b)\r\n        ;\r\n    return a;\r\n}\r\n// descending range\r\nfunction descR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = b - n)\r\n        ;\r\n    return a;\r\n}\r\n/**\r\n * Creates a numeric range\r\n *\r\n * @param {number} from\r\n * @param {number} to\r\n * @return {Array<number>}\r\n *\r\n * @example\r\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\r\n * range(2, -2) // => [2, 1, 0, -1, -2]\r\n */\r\nfunction range(from, to) {\r\n    return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\r\n}\r\n/**\r\n * Rotates a list a number of times. It\"s completly agnostic about the\r\n * contents of the list.\r\n *\r\n * @param {Integer} times - the number of rotations\r\n * @param {Array} array\r\n * @return {Array} the rotated array\r\n *\r\n * @example\r\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\r\n */\r\nfunction rotate(times, arr) {\r\n    const len = arr.length;\r\n    const n = ((times % len) + len) % len;\r\n    return arr.slice(n, len).concat(arr.slice(0, n));\r\n}\r\n/**\r\n * Return a copy of the array with the null values removed\r\n * @function\r\n * @param {Array} array\r\n * @return {Array}\r\n *\r\n * @example\r\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\r\n */\r\nfunction compact(arr) {\r\n    return arr.filter(n => n === 0 || n);\r\n}\r\n/**\r\n * Sort an array of notes in ascending order. Pitch classes are listed\r\n * before notes. Any string that is not a note is removed.\r\n *\r\n * @param {string[]} notes\r\n * @return {string[]} sorted array of notes\r\n *\r\n * @example\r\n * sortedNoteNames(['c2', 'c5', 'c1', 'c0', 'c6', 'c'])\r\n * // => ['C', 'C0', 'C1', 'C2', 'C5', 'C6']\r\n * sortedNoteNames(['c', 'F', 'G', 'a', 'b', 'h', 'J'])\r\n * // => ['C', 'F', 'G', 'A', 'B']\r\n */\r\nfunction sortedNoteNames(notes) {\r\n    const valid = notes.map(n => note(n)).filter(n => !n.empty);\r\n    return valid.sort((a, b) => a.height - b.height).map(n => n.name);\r\n}\r\n/**\r\n * Get sorted notes with duplicates removed. Pitch classes are listed\r\n * before notes.\r\n *\r\n * @function\r\n * @param {string[]} array\r\n * @return {string[]} unique sorted notes\r\n *\r\n * @example\r\n * Array.sortedUniqNoteNames(['a', 'b', 'c2', '1p', 'p2', 'c2', 'b', 'c', 'c3' ])\r\n * // => [ 'C', 'A', 'B', 'C2', 'C3' ]\r\n */\r\nfunction sortedUniqNoteNames(arr) {\r\n    return sortedNoteNames(arr).filter((n, i, a) => i === 0 || n !== a[i - 1]);\r\n}\r\n/**\r\n * Randomizes the order of the specified array in-place, using the Fisher–Yates shuffle.\r\n *\r\n * @function\r\n * @param {Array} array\r\n * @return {Array} the array shuffled\r\n *\r\n * @example\r\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\r\n */\r\nfunction shuffle(arr, rnd = Math.random) {\r\n    let i;\r\n    let t;\r\n    let m = arr.length;\r\n    while (m) {\r\n        i = Math.floor(rnd() * m--);\r\n        t = arr[m];\r\n        arr[m] = arr[i];\r\n        arr[i] = t;\r\n    }\r\n    return arr;\r\n}\r\n/**\r\n * Get all permutations of an array\r\n *\r\n * @param {Array} array - the array\r\n * @return {Array<Array>} an array with all the permutations\r\n * @example\r\n * permutations([\"a\", \"b\", \"c\"])) // =>\r\n * [\r\n *   [\"a\", \"b\", \"c\"],\r\n *   [\"b\", \"a\", \"c\"],\r\n *   [\"b\", \"c\", \"a\"],\r\n *   [\"a\", \"c\", \"b\"],\r\n *   [\"c\", \"a\", \"b\"],\r\n *   [\"c\", \"b\", \"a\"]\r\n * ]\r\n */\r\nfunction permutations(arr) {\r\n    if (arr.length === 0) {\r\n        return [[]];\r\n    }\r\n    return permutations(arr.slice(1)).reduce((acc, perm) => {\r\n        return acc.concat(arr.map((e, pos) => {\r\n            const newPerm = perm.slice();\r\n            newPerm.splice(pos, 0, arr[0]);\r\n            return newPerm;\r\n        }));\r\n    }, []);\r\n}\n\nexport { compact, permutations, range, rotate, shuffle, sortedNoteNames, sortedUniqNoteNames };\n//# sourceMappingURL=index.esnext.js.map\n","import { range, compact, rotate } from '@tonaljs/array';\nimport { note, interval } from '@tonaljs/core';\n\nconst EmptyPcset = {\r\n    empty: true,\r\n    name: \"\",\r\n    setNum: 0,\r\n    chroma: \"000000000000\",\r\n    normalized: \"000000000000\",\r\n    intervals: []\r\n};\r\n// UTILITIES\r\nconst setNumToChroma = (num) => Number(num).toString(2);\r\nconst chromaToNumber = (chroma) => parseInt(chroma, 2);\r\nconst REGEX = /^[01]{12}$/;\r\nfunction isChroma(set) {\r\n    return REGEX.test(set);\r\n}\r\nconst isPcsetNum = (set) => typeof set === \"number\" && set >= 0 && set <= 4095;\r\nconst isPcset = (set) => set && isChroma(set.chroma);\r\nconst cache = { [EmptyPcset.chroma]: EmptyPcset };\r\n/**\r\n * Get the pitch class set of a collection of notes or set number or chroma\r\n */\r\nfunction pcset(src) {\r\n    const chroma = isChroma(src)\r\n        ? src\r\n        : isPcsetNum(src)\r\n            ? setNumToChroma(src)\r\n            : Array.isArray(src)\r\n                ? listToChroma(src)\r\n                : isPcset(src)\r\n                    ? src.chroma\r\n                    : EmptyPcset.chroma;\r\n    return (cache[chroma] = cache[chroma] || chromaToPcset(chroma));\r\n}\r\nconst IVLS = \"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\".split(\" \");\r\n/**\r\n * @private\r\n * Get the intervals of a pcset *starting from C*\r\n * @param {Set} set - the pitch class set\r\n * @return {IntervalName[]} an array of interval names or an empty array\r\n * if not a valid pitch class set\r\n */\r\nfunction chromaToIntervals(chroma) {\r\n    const intervals = [];\r\n    for (let i = 0; i < 12; i++) {\r\n        // tslint:disable-next-line:curly\r\n        if (chroma.charAt(i) === \"1\")\r\n            intervals.push(IVLS[i]);\r\n    }\r\n    return intervals;\r\n}\r\nlet all;\r\n/**\r\n * Get a list of all possible pitch class sets (all possible chromas) *having\r\n * C as root*. There are 2048 different chromas. If you want them with another\r\n * note you have to transpose it\r\n *\r\n * @see http://allthescales.org/\r\n * @return {Array<PcsetChroma>} an array of possible chromas from '10000000000' to '11111111111'\r\n */\r\nfunction chromas() {\r\n    all = all || range(2048, 4095).map(setNumToChroma);\r\n    return all.slice();\r\n}\r\n/**\r\n * Given a a list of notes or a pcset chroma, produce the rotations\r\n * of the chroma discarding the ones that starts with \"0\"\r\n *\r\n * This is used, for example, to get all the modes of a scale.\r\n *\r\n * @param {Array|string} set - the list of notes or pitchChr of the set\r\n * @param {boolean} normalize - (Optional, true by default) remove all\r\n * the rotations that starts with \"0\"\r\n * @return {Array<string>} an array with all the modes of the chroma\r\n *\r\n * @example\r\n * Pcset.modes([\"C\", \"D\", \"E\"]).map(Pcset.intervals)\r\n */\r\nfunction modes(set, normalize = true) {\r\n    const pcs = pcset(set);\r\n    const binary = pcs.chroma.split(\"\");\r\n    return compact(binary.map((_, i) => {\r\n        const r = rotate(i, binary);\r\n        return normalize && r[0] === \"0\" ? null : r.join(\"\");\r\n    }));\r\n}\r\n/**\r\n * Test if two pitch class sets are numentical\r\n *\r\n * @param {Array|string} set1 - one of the pitch class sets\r\n * @param {Array|string} set2 - the other pitch class set\r\n * @return {boolean} true if they are equal\r\n * @example\r\n * Pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\r\n */\r\nfunction isEqual(s1, s2) {\r\n    return pcset(s1).setNum === pcset(s2).setNum;\r\n}\r\n/**\r\n * Create a function that test if a collection of notes is a\r\n * subset of a given set\r\n *\r\n * The function is curryfied.\r\n *\r\n * @param {PcsetChroma|NoteName[]} set - the superset to test against (chroma or\r\n * list of notes)\r\n * @return{function(PcsetChroma|NoteNames[]): boolean} a function accepting a set\r\n * to test against (chroma or list of notes)\r\n * @example\r\n * const inCMajor = Pcset.isSubsetOf([\"C\", \"E\", \"G\"])\r\n * inCMajor([\"e6\", \"c4\"]) // => true\r\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\r\n */\r\nfunction isSubsetOf(set) {\r\n    const s = pcset(set).setNum;\r\n    return (notes) => {\r\n        const o = pcset(notes).setNum;\r\n        // tslint:disable-next-line: no-bitwise\r\n        return s && s !== o && (o & s) === o;\r\n    };\r\n}\r\n/**\r\n * Create a function that test if a collection of notes is a\r\n * superset of a given set (it contains all notes and at least one more)\r\n *\r\n * @param {Set} set - an array of notes or a chroma set string to test against\r\n * @return {(subset: Set): boolean} a function that given a set\r\n * returns true if is a subset of the first one\r\n * @example\r\n * const extendsCMajor = Pcset.isSupersetOf([\"C\", \"E\", \"G\"])\r\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\r\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\r\n */\r\nfunction isSupersetOf(set) {\r\n    const s = pcset(set).setNum;\r\n    return (notes) => {\r\n        const o = pcset(notes).setNum;\r\n        // tslint:disable-next-line: no-bitwise\r\n        return s && s !== o && (o | s) === o;\r\n    };\r\n}\r\n/**\r\n * Test if a given pitch class set includes a note\r\n *\r\n * @param {Array<string>} set - the base set to test against\r\n * @param {string} note - the note to test\r\n * @return {boolean} true if the note is included in the pcset\r\n *\r\n * Can be partially applied\r\n *\r\n * @example\r\n * const isNoteInCMajor = isNoteIncludedInSet(['C', 'E', 'G'])\r\n * isNoteInCMajor('C4') // => true\r\n * isNoteInCMajor('C#4') // => false\r\n */\r\nfunction isNoteIncludedInSet(set) {\r\n    const s = pcset(set);\r\n    return (noteName) => {\r\n        const n = note(noteName);\r\n        return s && !n.empty && s.chroma.charAt(n.chroma) === \"1\";\r\n    };\r\n}\r\n/** @deprecated use: isNoteIncludedIn */\r\nconst includes = isNoteIncludedInSet;\r\n/**\r\n * Filter a list with a pitch class set\r\n *\r\n * @param {Array|string} set - the pitch class set notes\r\n * @param {Array|string} notes - the note list to be filtered\r\n * @return {Array} the filtered notes\r\n *\r\n * @example\r\n * Pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\r\n * Pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\r\n */\r\nfunction filter(set) {\r\n    const isIncluded = isNoteIncludedInSet(set);\r\n    return (notes) => {\r\n        return notes.filter(isIncluded);\r\n    };\r\n}\r\n// PRIVATE //\r\nfunction chromaRotations(chroma) {\r\n    const binary = chroma.split(\"\");\r\n    return binary.map((_, i) => rotate(i, binary).join(\"\"));\r\n}\r\nfunction chromaToPcset(chroma) {\r\n    const setNum = chromaToNumber(chroma);\r\n    const normalizedNum = chromaRotations(chroma)\r\n        .map(chromaToNumber)\r\n        .filter(n => n >= 2048)\r\n        .sort()[0];\r\n    const normalized = setNumToChroma(normalizedNum);\r\n    const intervals = chromaToIntervals(chroma);\r\n    return {\r\n        empty: false,\r\n        name: \"\",\r\n        setNum,\r\n        chroma,\r\n        normalized,\r\n        intervals\r\n    };\r\n}\r\nfunction listToChroma(set) {\r\n    if (set.length === 0) {\r\n        return EmptyPcset.chroma;\r\n    }\r\n    let pitch;\r\n    const binary = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < set.length; i++) {\r\n        pitch = note(set[i]);\r\n        // tslint:disable-next-line: curly\r\n        if (pitch.empty)\r\n            pitch = interval(set[i]);\r\n        // tslint:disable-next-line: curly\r\n        if (!pitch.empty)\r\n            binary[pitch.chroma] = 1;\r\n    }\r\n    return binary.join(\"\");\r\n}\n\nexport { EmptyPcset, chromaToIntervals, chromas, filter, includes, isEqual, isNoteIncludedInSet, isSubsetOf, isSupersetOf, modes, pcset };\n//# sourceMappingURL=index.esnext.js.map\n","import { pcset, EmptyPcset } from '@tonaljs/pcset';\n\n/**\r\n * @private\r\n * Chord List\r\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\r\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\r\n */\r\nconst CHORDS = [\r\n    // ==Major==\r\n    [\"1P 3M 5P\", \"major\", \"M \"],\r\n    [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 Δ ma7 M7 Maj7\"],\r\n    [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 Δ9\"],\r\n    [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13\"],\r\n    [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\r\n    [\"1P 3M 5P 6M 9M\", \"sixth/ninth\", \"6/9 69\"],\r\n    [\"1P 3M 5P 7M 11A\", \"lydian\", \"maj#4 Δ#4 Δ#11\"],\r\n    [\"1P 3M 6m 7M\", \"major seventh b6\", \"M7b6\"],\r\n    // ==Minor==\r\n    // '''Normal'''\r\n    [\"1P 3m 5P\", \"minor\", \"m min -\"],\r\n    [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\r\n    [\"1P 3m 5P 7M\", \"minor/major seventh\", \"m/ma7 m/maj7 mM7 m/M7 -Δ7 mΔ\"],\r\n    [\"1P 3m 5P 6M\", \"minor sixth\", \"m6\"],\r\n    [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9\"],\r\n    [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11\"],\r\n    [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13\"],\r\n    // '''Diminished'''\r\n    [\"1P 3m 5d\", \"diminished\", \"dim ° o\"],\r\n    [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 °7 o7\"],\r\n    [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 ø\"],\r\n    // ==Dominant/Seventh==\r\n    // '''Normal'''\r\n    [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\r\n    [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\r\n    [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\r\n    [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\r\n    // '''Altered'''\r\n    [\"1P 3M 5P 7m 9m\", \"dominant b9\", \"7b9\"],\r\n    [\"1P 3M 5P 7m 9A\", \"dominant #9\", \"7#9\"],\r\n    [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\r\n    // '''Suspended'''\r\n    [\"1P 4P 5P\", \"suspended 4th\", \"sus4\"],\r\n    [\"1P 2M 5P\", \"suspended 2nd\", \"sus2\"],\r\n    [\"1P 4P 5P 7m\", \"suspended 4th seventh\", \"7sus4\"],\r\n    [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\r\n    [\"1P 4P 5P 7m 9m\", \"suspended 4th b9\", \"b9sus phryg\"],\r\n    // ==Other==\r\n    [\"1P 5P\", \"fifth\", \"5\"],\r\n    [\"1P 3M 5A\", \"augmented\", \"aug + +5\"],\r\n    [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5\"],\r\n    [\"1P 3M 5P 7M 9M 11A\", \"major #11 (lydian)\", \"maj9#11 Δ9#11\"],\r\n    // ==Legacy==\r\n    [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\r\n    [\"1P 3M 13m\", \"\", \"Mb6\"],\r\n    [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\r\n    [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7aug aug7\"],\r\n    [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7alt 7#5#9_ 7#9b13_\"],\r\n    [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\r\n    [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\r\n    [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9\"],\r\n    [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\r\n    [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\r\n    [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\r\n    [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\r\n    [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\r\n    [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\r\n    [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\r\n    [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\r\n    [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\r\n    [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\r\n    [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\r\n    [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\r\n    [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9\"],\r\n    [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\r\n    [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\r\n    [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9 13#9_\"],\r\n    [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\r\n    [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4 9#11_ 9#4_\"],\r\n    [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\r\n    [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\r\n    [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9\"],\r\n    [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\r\n    [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\r\n    [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\r\n    [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\r\n    [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\r\n    [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\r\n    [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\r\n    [\"1P 3M 5d\", \"\", \"Mb5\"],\r\n    [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\r\n    [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\r\n    [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\r\n    [\"1P 3M 5d 7m\", \"\", \"7b5\"],\r\n    [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\r\n    [\"1P 3M 7m\", \"\", \"7no5\"],\r\n    [\"1P 3M 7m 13m\", \"\", \"7b13\"],\r\n    [\"1P 3M 7m 9M\", \"\", \"9no5\"],\r\n    [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\r\n    [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\r\n    [\"1P 3m 4P 5P\", \"\", \"madd4\"],\r\n    [\"1P 3m 5A\", \"\", \"m#5 m+ mb6\"],\r\n    [\"1P 3m 5P 6M 9M\", \"\", \"m69 _69\"],\r\n    [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\r\n    [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\r\n    [\"1P 3m 5P 7M 9M\", \"\", \"mMaj9 -Maj9\"],\r\n    [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\r\n    [\"1P 3m 5P 9M\", \"\", \"madd9\"],\r\n    [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\r\n    [\"1P 3m 5d 7M\", \"\", \"oM7\"],\r\n    [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\r\n    [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\r\n    [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\r\n    [\"1P 3m 6m 7m 9M 11P\", \"\", \"m11A\"],\r\n    [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\r\n    [\"1P 3m 7m 12d 2M\", \"\", \"m9b5 h9 -9b5\"],\r\n    [\"1P 3m 7m 12d 2M 4P\", \"\", \"m11b5 h11 _11b5\"],\r\n    [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\r\n    [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\r\n    [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\r\n    [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\r\n    [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\r\n    [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\r\n    [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\r\n    [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\r\n    [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\r\n    [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"]\r\n];\n\nconst NoChordType = {\r\n    ...EmptyPcset,\r\n    name: \"\",\r\n    quality: \"Unknown\",\r\n    intervals: [],\r\n    aliases: []\r\n};\r\nlet chords = [];\r\nlet index = {};\r\n/**\r\n * Given a chord name or chroma, return the chord properties\r\n * @param {string} source - chord name or pitch class set chroma\r\n * @example\r\n * import { get } from 'tonaljs/chord-dictionary'\r\n * get('major') // => { name: 'major', ... }\r\n */\r\nfunction get(type) {\r\n    return index[type] || NoChordType;\r\n}\r\n/**\r\n * @deprecated\r\n * @see get\r\n */\r\nfunction chordType(type) {\r\n    // tslint:disable-next-line\r\n    console.warn(\"ChordDictionary.chordType is deprecated. Use ChordDictionary.get instead\");\r\n    return get(type);\r\n}\r\n/**\r\n * Keys used to reference chord types\r\n */\r\nfunction keys() {\r\n    return Object.keys(index);\r\n}\r\n/**\r\n * Return a list of all chord types\r\n */\r\nfunction entries() {\r\n    return chords.slice();\r\n}\r\n/**\r\n * Clear the dictionary\r\n */\r\nfunction clear() {\r\n    chords = [];\r\n    index = {};\r\n}\r\n/**\r\n * Add a chord to the dictionary.\r\n * @param intervals\r\n * @param aliases\r\n * @param [fullName]\r\n */\r\nfunction add(intervals, aliases, fullName) {\r\n    const quality = getQuality(intervals);\r\n    const chord = {\r\n        ...pcset(intervals),\r\n        name: fullName || \"\",\r\n        quality,\r\n        intervals,\r\n        aliases\r\n    };\r\n    chords.push(chord);\r\n    if (chord.name) {\r\n        index[chord.name] = chord;\r\n    }\r\n    index[chord.setNum] = chord;\r\n    index[chord.chroma] = chord;\r\n    chord.aliases.forEach(alias => addAlias(chord, alias));\r\n}\r\nfunction addAlias(chord, alias) {\r\n    index[alias] = chord;\r\n}\r\nfunction getQuality(intervals) {\r\n    const has = (interval) => intervals.indexOf(interval) !== -1;\r\n    return has(\"5A\")\r\n        ? \"Augmented\"\r\n        : has(\"3M\")\r\n            ? \"Major\"\r\n            : has(\"5d\")\r\n                ? \"Diminished\"\r\n                : has(\"3m\")\r\n                    ? \"Minor\"\r\n                    : \"Unknown\";\r\n}\r\nCHORDS.forEach(([ivls, fullName, names]) => add(ivls.split(\" \"), names.split(\" \"), fullName));\r\nchords.sort((a, b) => a.setNum - b.setNum);\n\nexport { add, addAlias, chordType, clear, entries, get, keys };\n//# sourceMappingURL=index.esnext.js.map\n","import { EmptyPcset, pcset } from '@tonaljs/pcset';\n\n// SCALES\r\n// Format: [\"intervals\", \"name\", \"alias1\", \"alias2\", ...]\r\nconst SCALES = [\r\n    // 5-note scales\r\n    [\"1P 2M 3M 5P 6M\", \"major pentatonic\", \"pentatonic\"],\r\n    [\"1P 3M 4P 5P 7M\", \"ionian pentatonic\"],\r\n    [\"1P 3M 4P 5P 7m\", \"mixolydian pentatonic\", \"indian\"],\r\n    [\"1P 2M 4P 5P 6M\", \"ritusen\"],\r\n    [\"1P 2M 4P 5P 7m\", \"egyptian\"],\r\n    [\"1P 3M 4P 5d 7m\", \"neopolitan major pentatonic\"],\r\n    [\"1P 3m 4P 5P 6m\", \"vietnamese 1\"],\r\n    [\"1P 2m 3m 5P 6m\", \"pelog\"],\r\n    [\"1P 2m 4P 5P 6m\", \"kumoijoshi\"],\r\n    [\"1P 2M 3m 5P 6m\", \"hirajoshi\"],\r\n    [\"1P 2m 4P 5d 7m\", \"iwato\"],\r\n    [\"1P 2m 4P 5P 7m\", \"in-sen\"],\r\n    [\"1P 3M 4A 5P 7M\", \"lydian pentatonic\", \"chinese\"],\r\n    [\"1P 3m 4P 6m 7m\", \"malkos raga\"],\r\n    [\"1P 3m 4P 5d 7m\", \"locrian pentatonic\", \"minor seven flat five pentatonic\"],\r\n    [\"1P 3m 4P 5P 7m\", \"minor pentatonic\", \"vietnamese 2\"],\r\n    [\"1P 3m 4P 5P 6M\", \"minor six pentatonic\"],\r\n    [\"1P 2M 3m 5P 6M\", \"flat three pentatonic\", \"kumoi\"],\r\n    [\"1P 2M 3M 5P 6m\", \"flat six pentatonic\"],\r\n    [\"1P 2m 3M 5P 6M\", \"scriabin\"],\r\n    [\"1P 3M 5d 6m 7m\", \"whole tone pentatonic\"],\r\n    [\"1P 3M 4A 5A 7M\", \"lydian #5P pentatonic\"],\r\n    [\"1P 3M 4A 5P 7m\", \"lydian dominant pentatonic\"],\r\n    [\"1P 3m 4P 5P 7M\", \"minor #7M pentatonic\"],\r\n    [\"1P 3m 4d 5d 7m\", \"super locrian pentatonic\"],\r\n    // 6-note scales\r\n    [\"1P 2M 3m 4P 5P 7M\", \"minor hexatonic\"],\r\n    [\"1P 2A 3M 5P 5A 7M\", \"augmented\"],\r\n    [\"1P 3m 4P 5d 5P 7m\", \"minor blues\", \"blues\"],\r\n    [\"1P 2M 3m 3M 5P 6M\", \"major blues\"],\r\n    [\"1P 2M 4P 5P 6M 7m\", \"piongio\"],\r\n    [\"1P 2m 3M 4A 6M 7m\", \"prometheus neopolitan\"],\r\n    [\"1P 2M 3M 4A 6M 7m\", \"prometheus\"],\r\n    [\"1P 2m 3M 5d 6m 7m\", \"mystery #1\"],\r\n    [\"1P 2m 3M 4P 5A 6M\", \"six tone symmetric\"],\r\n    [\"1P 2M 3M 4A 5A 7m\", \"whole tone\"],\r\n    // 7-note scales\r\n    [\"1P 2M 3M 4P 5d 6m 7m\", \"locrian major\", \"arabian\"],\r\n    [\"1P 2m 3M 4A 5P 6m 7M\", \"double harmonic lydian\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7M\", \"harmonic minor\"],\r\n    [\r\n        \"1P 2m 3m 3M 5d 6m 7m\",\r\n        \"altered\",\r\n        \"super locrian\",\r\n        \"diminished whole tone\",\r\n        \"pomeroy\"\r\n    ],\r\n    [\"1P 2M 3m 4P 5d 6m 7m\", \"locrian #2\", \"half-diminished\", '\"aeolian b5'],\r\n    [\r\n        \"1P 2M 3M 4P 5P 6m 7m\",\r\n        \"mixolydian b6\",\r\n        \"melodic minor fifth mode\",\r\n        \"hindu\"\r\n    ],\r\n    [\"1P 2M 3M 4A 5P 6M 7m\", \"lydian dominant\", \"lydian b7\", \"overtone\"],\r\n    [\"1P 2M 3M 4A 5P 6M 7M\", \"lydian\"],\r\n    [\"1P 2M 3M 4A 5A 6M 7M\", \"lydian augmented\"],\r\n    [\r\n        \"1P 2m 3m 4P 5P 6M 7m\",\r\n        \"dorian b2\",\r\n        \"phrygian #6\",\r\n        \"melodic minor second mode\"\r\n    ],\r\n    [\"1P 2M 3m 4P 5P 6M 7M\", \"melodic minor\"],\r\n    [\"1P 2m 3m 4P 5d 6m 7m\", \"locrian\"],\r\n    [\r\n        \"1P 2m 3m 4d 5d 6m 7d\",\r\n        \"ultralocrian\",\r\n        \"superlocrian bb7\",\r\n        \"·superlocrian diminished\"\r\n    ],\r\n    [\"1P 2m 3m 4P 5d 6M 7m\", \"locrian 6\", \"locrian natural 6\", \"locrian sharp 6\"],\r\n    [\"1P 2A 3M 4P 5P 5A 7M\", \"augmented heptatonic\"],\r\n    [\"1P 2M 3m 5d 5P 6M 7m\", \"romanian minor\"],\r\n    [\"1P 2M 3m 4A 5P 6M 7m\", \"dorian #4\"],\r\n    [\"1P 2M 3m 4A 5P 6M 7M\", \"lydian diminished\"],\r\n    [\"1P 2m 3m 4P 5P 6m 7m\", \"phrygian\"],\r\n    [\"1P 2M 3M 4A 5A 7m 7M\", \"leading whole tone\"],\r\n    [\"1P 2M 3M 4A 5P 6m 7m\", \"lydian minor\"],\r\n    [\"1P 2m 3M 4P 5P 6m 7m\", \"phrygian dominant\", \"spanish\", \"phrygian major\"],\r\n    [\"1P 2m 3m 4P 5P 6m 7M\", \"balinese\"],\r\n    [\"1P 2m 3m 4P 5P 6M 7M\", \"neopolitan major\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7m\", \"aeolian\", \"minor\"],\r\n    [\"1P 2M 3M 4P 5P 6m 7M\", \"harmonic major\"],\r\n    [\"1P 2m 3M 4P 5P 6m 7M\", \"double harmonic major\", \"gypsy\"],\r\n    [\"1P 2M 3m 4P 5P 6M 7m\", \"dorian\"],\r\n    [\"1P 2M 3m 4A 5P 6m 7M\", \"hungarian minor\"],\r\n    [\"1P 2A 3M 4A 5P 6M 7m\", \"hungarian major\"],\r\n    [\"1P 2m 3M 4P 5d 6M 7m\", \"oriental\"],\r\n    [\"1P 2m 3m 3M 4A 5P 7m\", \"flamenco\"],\r\n    [\"1P 2m 3m 4A 5P 6m 7M\", \"todi raga\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7m\", \"mixolydian\", \"dominant\"],\r\n    [\"1P 2m 3M 4P 5d 6m 7M\", \"persian\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7M\", \"major\", \"ionian\"],\r\n    [\"1P 2m 3M 5d 6m 7m 7M\", \"enigmatic\"],\r\n    [\r\n        \"1P 2M 3M 4P 5A 6M 7M\",\r\n        \"major augmented\",\r\n        \"major #5\",\r\n        \"ionian augmented\",\r\n        \"ionian #5\"\r\n    ],\r\n    [\"1P 2A 3M 4A 5P 6M 7M\", \"lydian #9\"],\r\n    // 8-note scales\r\n    [\"1P 2m 3M 4P 4A 5P 6m 7M\", \"purvi raga\"],\r\n    [\"1P 2m 3m 3M 4P 5P 6m 7m\", \"spanish heptatonic\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7m 7M\", \"bebop\"],\r\n    [\"1P 2M 3m 3M 4P 5P 6M 7m\", \"bebop minor\"],\r\n    [\"1P 2M 3M 4P 5P 5A 6M 7M\", \"bebop major\"],\r\n    [\"1P 2m 3m 4P 5d 5P 6m 7m\", \"bebop locrian\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7m 7M\", \"minor bebop\"],\r\n    [\"1P 2M 3m 4P 5d 6m 6M 7M\", \"diminished\", \"whole-half diminished\"],\r\n    [\"1P 2M 3M 4P 5d 5P 6M 7M\", \"ichikosucho\"],\r\n    [\"1P 2M 3m 4P 5P 6m 6M 7M\", \"minor six diminished\"],\r\n    [\"1P 2m 3m 3M 4A 5P 6M 7m\", \"half-whole diminished\", \"dominant diminished\"],\r\n    [\"1P 3m 3M 4P 5P 6M 7m 7M\", \"kafi raga\"],\r\n    // 9-note scales\r\n    [\"1P 2M 3m 3M 4P 5d 5P 6M 7m\", \"composite blues\"],\r\n    // 12-note scales\r\n    [\"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\", \"chromatic\"]\r\n];\n\nconst NoScaleType = {\r\n    ...EmptyPcset,\r\n    intervals: [],\r\n    aliases: []\r\n};\r\nlet scales = [];\r\nlet index = {};\r\n/**\r\n * Given a scale name or chroma, return the scale properties\r\n *\r\n * @param {string} type - scale name or pitch class set chroma\r\n * @example\r\n * import { get } from 'tonaljs/scale-dictionary'\r\n * get('major') // => { name: 'major', ... }\r\n */\r\nfunction get(type) {\r\n    return index[type] || NoScaleType;\r\n}\r\n/**\r\n * Given a scale name or chroma, return the scale properties\r\n * @deprecated\r\n * @see Scale.get\r\n */\r\nfunction scaleType(type) {\r\n    // tslint:disable-next-line\r\n    console.warn(\"ScaleDictionary.scaleType is deprecated. Use ScaleDictionary.get instead\");\r\n    return get(type);\r\n}\r\n/**\r\n * Return a list of all scale types\r\n */\r\nfunction entries() {\r\n    return scales.slice();\r\n}\r\n/**\r\n * Keys used to reference scale types\r\n */\r\nfunction keys() {\r\n    return Object.keys(index);\r\n}\r\n/**\r\n * Clear the dictionary\r\n */\r\nfunction clear() {\r\n    scales = [];\r\n    index = {};\r\n}\r\n/**\r\n * Add a scale into dictionary\r\n * @param intervals\r\n * @param name\r\n * @param aliases\r\n */\r\nfunction add(intervals, name, aliases = []) {\r\n    const scale = { ...pcset(intervals), name, intervals, aliases };\r\n    scales.push(scale);\r\n    index[scale.name] = scale;\r\n    index[scale.setNum] = scale;\r\n    index[scale.chroma] = scale;\r\n    scale.aliases.forEach(alias => addAlias(scale, alias));\r\n    return scale;\r\n}\r\nfunction addAlias(scale, alias) {\r\n    index[alias] = scale;\r\n}\r\nSCALES.forEach(([ivls, name, ...aliases]) => add(ivls.split(\" \"), name, aliases));\n\nexport { NoScaleType, add, addAlias, clear, entries, get, keys, scaleType };\n//# sourceMappingURL=index.esnext.js.map\n","import { get, entries as entries$1 } from '@tonaljs/chord-dictionary';\nimport { tokenizeNote, transpose as transpose$1, note } from '@tonaljs/core';\nimport { isSupersetOf, isSubsetOf } from '@tonaljs/pcset';\nimport { entries } from '@tonaljs/scale-dictionary';\n\nconst NoChord = {\r\n    empty: true,\r\n    name: \"\",\r\n    type: \"\",\r\n    tonic: null,\r\n    setNum: NaN,\r\n    quality: \"Unknown\",\r\n    chroma: \"\",\r\n    normalized: \"\",\r\n    aliases: [],\r\n    notes: [],\r\n    intervals: []\r\n};\r\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\r\n// (see https://github.com/danigb/tonal/issues/55)\r\nconst NUM_TYPES = /^(6|64|7|9|11|13)$/;\r\n/**\r\n * Tokenize a chord name. It returns an array with the tonic and chord type\r\n * If not tonic is found, all the name is considered the chord name.\r\n *\r\n * This function does NOT check if the chord type exists or not. It only tries\r\n * to split the tonic and chord type.\r\n *\r\n * @function\r\n * @param {string} name - the chord name\r\n * @return {Array} an array with [tonic, type]\r\n * @example\r\n * tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\r\n * tokenize(\"C7\") // => [ \"C\", \"7\" ]\r\n * tokenize(\"mMaj7\") // => [ null, \"mMaj7\" ]\r\n * tokenize(\"Cnonsense\") // => [ null, \"nonsense\" ]\r\n */\r\nfunction tokenize(name) {\r\n    const [letter, acc, oct, type] = tokenizeNote(name);\r\n    if (letter === \"\") {\r\n        return [\"\", name];\r\n    }\r\n    // aug is augmented (see https://github.com/danigb/tonal/issues/55)\r\n    if (letter === \"A\" && type === \"ug\") {\r\n        return [\"\", \"aug\"];\r\n    }\r\n    // see: https://github.com/tonaljs/tonal/issues/70\r\n    if (!type && (oct === \"4\" || oct === \"5\")) {\r\n        return [letter + acc, oct];\r\n    }\r\n    if (NUM_TYPES.test(oct)) {\r\n        return [letter + acc, oct + type];\r\n    }\r\n    else {\r\n        return [letter + acc + oct, type];\r\n    }\r\n}\r\n/**\r\n * Get a Chord from a chord name.\r\n */\r\nfunction chord(src) {\r\n    const { type, tonic } = findChord(src);\r\n    if (!type || type.empty) {\r\n        return NoChord;\r\n    }\r\n    const notes = tonic\r\n        ? type.intervals.map(i => transpose$1(tonic, i))\r\n        : [];\r\n    const name = tonic ? tonic + \" \" + type.name : type.name;\r\n    return { ...type, name, type: type.name, tonic: tonic || \"\", notes };\r\n}\r\nfunction findChord(src) {\r\n    if (!src || !src.length) {\r\n        return {};\r\n    }\r\n    const tokens = Array.isArray(src) ? src : tokenize(src);\r\n    const tonic = note(tokens[0]).name;\r\n    const type = get(tokens[1]);\r\n    if (!type.empty) {\r\n        return { tonic, type };\r\n    }\r\n    else if (tonic && typeof src === \"string\") {\r\n        return { tonic: \"\", type: get(src) };\r\n    }\r\n    else {\r\n        return {};\r\n    }\r\n}\r\n/**\r\n * Transpose a chord name\r\n *\r\n * @param {string} chordName - the chord name\r\n * @return {string} the transposed chord\r\n *\r\n * @example\r\n * transpose('Dm7', 'P4') // => 'Gm7\r\n */\r\nfunction transpose(chordName, interval) {\r\n    const [tonic, type] = tokenize(chordName);\r\n    if (!tonic) {\r\n        return name;\r\n    }\r\n    return transpose$1(tonic, interval) + type;\r\n}\r\n/**\r\n * Get all scales where the given chord fits\r\n *\r\n * @example\r\n * chordScales('C7b9')\r\n * // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\r\n */\r\nfunction chordScales(name) {\r\n    const s = chord(name);\r\n    const isChordIncluded = isSupersetOf(s.chroma);\r\n    return entries()\r\n        .filter(scale => isChordIncluded(scale.chroma))\r\n        .map(scale => scale.name);\r\n}\r\n/**\r\n * Get all chords names that are a superset of the given one\r\n * (has the same notes and at least one more)\r\n *\r\n * @function\r\n * @example\r\n * extended(\"CMaj7\")\r\n * // => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\r\n */\r\nfunction extended(chordName) {\r\n    const s = chord(chordName);\r\n    const isSuperset = isSupersetOf(s.chroma);\r\n    return entries$1()\r\n        .filter(chord => isSuperset(chord.chroma))\r\n        .map(chord => s.tonic + chord.aliases[0]);\r\n}\r\n/**\r\n * Find all chords names that are a subset of the given one\r\n * (has less notes but all from the given chord)\r\n *\r\n * @example\r\n */\r\nfunction reduced(chordName) {\r\n    const s = chord(chordName);\r\n    const isSubset = isSubsetOf(s.chroma);\r\n    return entries$1()\r\n        .filter(chord => isSubset(chord.chroma))\r\n        .map(chord => s.tonic + chord.aliases[0]);\r\n}\n\nexport { chord, chordScales, extended, reduced, tokenize, transpose };\n//# sourceMappingURL=index.esnext.js.map\n","import { interval, coordToInterval } from '@tonaljs/core';\n\n/**\r\n * Get the natural list of names\r\n */\r\nfunction names() {\r\n    return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\r\n}\r\n/**\r\n * Get properties of an interval\r\n *\r\n * @function\r\n * @example\r\n * Interval.properties('P4') // => {\"alt\": 0,  \"dir\": 1,  \"name\": \"4P\", \"num\": 4, \"oct\": 0, \"q\": \"P\", \"semitones\": 5, \"simple\": 4, \"step\": 3, \"type\": \"perfectable\"}\r\n */\r\nconst properties = interval;\r\n/**\r\n * Get name of an interval\r\n *\r\n * @function\r\n * @example\r\n * Interval.name('4P') // => \"4P\"\r\n * Interval.name('P4') // => \"4P\"\r\n * Interval.name('C4') // => \"\"\r\n */\r\nconst name = (name) => interval(name).name;\r\n/**\r\n * Get semitones of an interval\r\n * @function\r\n * @example\r\n * Interval.semitones('P4') // => 5\r\n */\r\nconst semitones = (name) => interval(name).semitones;\r\n/**\r\n * Get the simplified version of an interval.\r\n *\r\n * @function\r\n * @param {string} interval - the interval to simplify\r\n * @return {string} the simplified interval\r\n *\r\n * @example\r\n * Interval.simplify(\"9M\") // => \"2M\"\r\n * Interval.simplify(\"2M\") // => \"2M\"\r\n * Interval.simplify(\"-2M\") // => \"7m\"\r\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Intervaal.simplify)\r\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\r\n */\r\nfunction simplify(name) {\r\n    const i = interval(name);\r\n    return i.empty ? \"\" : i.simple + i.q;\r\n}\r\n/**\r\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\r\n * of an interval.\r\n *\r\n * @function\r\n * @param {string} interval - the interval to invert in interval shorthand\r\n * notation or interval array notation\r\n * @return {string} the inverted interval\r\n *\r\n * @example\r\n * Interval.invert(\"3m\") // => \"6M\"\r\n * Interval.invert(\"2M\") // => \"7m\"\r\n */\r\nfunction invert(name) {\r\n    const i = interval(name);\r\n    if (i.empty) {\r\n        return \"\";\r\n    }\r\n    const step = (7 - i.step) % 7;\r\n    const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\r\n    return interval({ step, alt, oct: i.oct, dir: i.dir }).name;\r\n}\r\n// interval numbers\r\nconst IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\r\n// interval qualities\r\nconst IQ = \"P m M m M P d P m M m M\".split(\" \");\r\n/**\r\n * Get interval name from semitones number. Since there are several interval\r\n * names for the same number, the name it's arbitrary, but deterministic.\r\n *\r\n * @param {Integer} num - the number of semitones (can be negative)\r\n * @return {string} the interval name\r\n * @example\r\n * Interval.fromSemitones(7) // => \"5P\"\r\n * Interval.fromSemitones(-7) // => \"-5P\"\r\n */\r\nfunction fromSemitones(semitones) {\r\n    const d = semitones < 0 ? -1 : 1;\r\n    const n = Math.abs(semitones);\r\n    const c = n % 12;\r\n    const o = Math.floor(n / 12);\r\n    return d * (IN[c] + 7 * o) + IQ[c];\r\n}\r\n/**\r\n * Adds two intervals\r\n *\r\n * @function\r\n * @param {string} interval1\r\n * @param {string} interval2\r\n * @return {string} the added interval name\r\n * @example\r\n * Interval.add(\"3m\", \"5P\") // => \"7m\"\r\n */\r\nconst add = combinator((a, b) => [a[0] + b[0], a[1] + b[1]]);\r\n/**\r\n * Returns a function that adds an interval\r\n *\r\n * @function\r\n * @example\r\n * ['1P', '2M', '3M'].map(Interval.addTo('5P')) // => [\"5P\", \"6M\", \"7M\"]\r\n */\r\nconst addTo = (interval) => (other) => add(interval, other);\r\n/**\r\n * Subtracts two intervals\r\n *\r\n * @function\r\n * @param {string} minuendInterval\r\n * @param {string} subtrahendInterval\r\n * @return {string} the substracted interval name\r\n * @example\r\n * Interval.substract('5P', '3M') // => '3m'\r\n * Interval.substract('3M', '5P') // => '-3m'\r\n */\r\nconst substract = combinator((a, b) => [a[0] - b[0], a[1] - b[1]]);\r\nvar index = {\r\n    names,\r\n    properties,\r\n    name,\r\n    semitones,\r\n    fromSemitones,\r\n    invert,\r\n    simplify,\r\n    add,\r\n    addTo,\r\n    substract\r\n};\r\nfunction combinator(fn) {\r\n    return (a, b) => {\r\n        const coordA = interval(a).coord;\r\n        const coordB = interval(b).coord;\r\n        if (coordA && coordB) {\r\n            const coord = fn(coordA, coordB);\r\n            return coordToInterval(coord).name;\r\n        }\r\n    };\r\n}\n\nexport default index;\nexport { add, addTo, fromSemitones, invert, name, names, properties, semitones, simplify, substract };\n//# sourceMappingURL=index.esnext.js.map\n","import { note } from '@tonaljs/core';\n\nfunction isMidi(arg) {\r\n    return +arg >= 0 && +arg <= 127;\r\n}\r\n/**\r\n * Get the note midi number (a number between 0 and 127)\r\n *\r\n * It returns undefined if not valid note name\r\n *\r\n * @function\r\n * @param {string|number} note - the note name or midi number\r\n * @return {Integer} the midi number or undefined if not valid note\r\n * @example\r\n * import { toMidi } from '@tonaljs/midi'\r\n * toMidi(\"C4\") // => 60\r\n * toMidi(60) // => 60\r\n * toMidi('60') // => 60\r\n */\r\nfunction toMidi(note$1) {\r\n    if (isMidi(note$1)) {\r\n        return +note$1;\r\n    }\r\n    const n = note(note$1);\r\n    return n.empty ? null : n.midi;\r\n}\r\n/**\r\n * Get the frequency in hertzs from midi number\r\n *\r\n * @param {number} midi - the note midi number\r\n * @param {number} [tuning = 440] - A4 tuning frequency in Hz (440 by default)\r\n * @return {number} the frequency or null if not valid note midi\r\n * @example\r\n * import { midiToFreq} from '@tonaljs/midi'\r\n * midiToFreq(69) // => 440\r\n */\r\nfunction midiToFreq(midi, tuning = 440) {\r\n    return Math.pow(2, (midi - 69) / 12) * tuning;\r\n}\r\nconst L2 = Math.log(2);\r\nconst L440 = Math.log(440);\r\n/**\r\n * Get the midi number from a frequency in hertz. The midi number can\r\n * contain decimals (with two digits precission)\r\n *\r\n * @param {number} frequency\r\n * @return {number}\r\n * @example\r\n * import { freqToMidi} from '@tonaljs/midi'\r\n * freqToMidi(220)); //=> 57\r\n * freqToMidi(261.62)); //=> 60\r\n * freqToMidi(261)); //=> 59.96\r\n */\r\nfunction freqToMidi(freq) {\r\n    const v = (12 * (Math.log(freq) - L440)) / L2 + 69;\r\n    return Math.round(v * 100) / 100;\r\n}\r\nconst SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\r\nconst FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\r\n/**\r\n * Given a midi number, returns a note name. The altered notes will have\r\n * flats unless explicitly set with the optional `useSharps` parameter.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @param {Object} options = default: `{ sharps: false, pitchClass: false }`\r\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\r\n * @return {string} the note name\r\n * @example\r\n * import { midiToNoteName } from '@tonaljs/midi'\r\n * midiToNoteName(61) // => \"Db4\"\r\n * midiToNoteName(61, { pitchClass: true }) // => \"Db\"\r\n * midiToNoteName(61, { sharps: true }) // => \"C#4\"\r\n * midiToNoteName(61, { pitchClass: true, sharps: true }) // => \"C#\"\r\n * // it rounds to nearest note\r\n * midiToNoteName(61.7) // => \"D4\"\r\n */\r\nfunction midiToNoteName(midi, options = {}) {\r\n    midi = Math.round(midi);\r\n    const pcs = options.sharps === true ? SHARPS : FLATS;\r\n    const pc = pcs[midi % 12];\r\n    if (options.pitchClass) {\r\n        return pc;\r\n    }\r\n    const o = Math.floor(midi / 12) - 1;\r\n    return pc + o;\r\n}\n\nexport { freqToMidi, isMidi, midiToFreq, midiToNoteName, toMidi };\n//# sourceMappingURL=index.esnext.js.map\n","import { note, transpose as transpose$1, coordToNote } from '@tonaljs/core';\nimport { midiToNoteName } from '@tonaljs/midi';\n\n/**\r\n * Get a note from a note name\r\n *\r\n * @function\r\n * @example\r\n * Note.properties('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\r\n */\r\nconst properties = note;\r\n/**\r\n * Get the note name\r\n * @function\r\n */\r\nconst name = (note) => properties(note).name;\r\n/**\r\n * Get the note pitch class name\r\n * @function\r\n */\r\nconst pitchClass = (note) => properties(note).pc;\r\n/**\r\n * Get the note accidentals\r\n * @function\r\n */\r\nconst accidentals = (note) => properties(note).acc;\r\n/**\r\n * Get the note octave\r\n * @function\r\n */\r\nconst octave = (note) => properties(note).oct;\r\n/**\r\n * Get the note midi\r\n * @function\r\n */\r\nconst midi = (note) => properties(note).midi;\r\n/**\r\n * Get the note midi\r\n * @function\r\n */\r\nconst freq = (note) => properties(note).freq;\r\n/**\r\n * Get the note chroma\r\n * @function\r\n */\r\nconst chroma = (note) => properties(note).chroma;\r\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @return {string} the note name\r\n * @example\r\n * Note.fromMidi(61) // => \"Db4\"\r\n * Note.fromMidi(61.7) // => \"D4\"\r\n */\r\nfunction fromMidi(midi) {\r\n    return midiToNoteName(midi);\r\n}\r\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @return {string} the note name\r\n * @example\r\n * Note.fromMidiSharps(61) // => \"C#4\"\r\n */\r\nfunction fromMidiSharps(midi) {\r\n    return midiToNoteName(midi, { sharps: true });\r\n}\r\n/**\r\n * Transpose a note by an interval\r\n */\r\nconst transpose = transpose$1;\r\nconst tr = transpose$1;\r\n/**\r\n * Transpose by an interval.\r\n * @function\r\n * @param {string} interval\r\n * @return {function} a function that transposes by the given interval\r\n * @example\r\n * [\"C\", \"D\", \"E\"].map(Note.transposeBy(\"5P\"));\r\n * // => [\"G\", \"A\", \"B\"]\r\n */\r\nconst transposeBy = (interval) => (note) => transpose(note, interval);\r\nconst trBy = transposeBy;\r\n/**\r\n * Transpose from a note\r\n * @function\r\n * @param {string} note\r\n * @return {function}  a function that transposes the the note by an interval\r\n * [\"1P\", \"3M\", \"5P\"].map(Note.transposeFrom(\"C\"));\r\n * // => [\"C\", \"E\", \"G\"]\r\n */\r\nconst transposeFrom = (note) => (interval) => transpose(note, interval);\r\nconst trFrom = transposeFrom;\r\n/**\r\n * Transpose a note by a number of perfect fifths.\r\n *\r\n * @function\r\n * @param {string} note - the note name\r\n * @param {number} fifhts - the number of fifths\r\n * @return {string} the transposed note name\r\n *\r\n * @example\r\n * import { transposeFifths } from \"@tonaljs/note\"\r\n * transposeFifths(\"G4\", 1) // => \"D\"\r\n * [0, 1, 2, 3, 4].map(fifths => transposeFifths(\"C\", fifths)) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\r\n */\r\nfunction transposeFifths(noteName, fifths) {\r\n    const note = properties(noteName);\r\n    if (note.empty) {\r\n        return \"\";\r\n    }\r\n    const [nFifths, nOcts] = note.coord;\r\n    const transposed = nOcts === undefined\r\n        ? coordToNote([nFifths + fifths])\r\n        : coordToNote([nFifths + fifths, nOcts]);\r\n    return transposed.name;\r\n}\r\nconst trFifths = transposeFifths;\r\n/**\r\n * Simplify a note\r\n *\r\n * @function\r\n * @param {string} note - the note to be simplified\r\n * - sameAccType: default true. Use same kind of accidentals that source\r\n * @return {string} the simplified note or '' if not valid note\r\n * @example\r\n * simplify(\"C##\") // => \"D\"\r\n * simplify(\"C###\") // => \"D#\"\r\n * simplify(\"C###\")\r\n * simplify(\"B#4\") // => \"C5\"\r\n */\r\nconst simplify = nameBuilder(true);\r\n/**\r\n * Get enharmonic of a note\r\n *\r\n * @function\r\n * @param {string} note\r\n * @return {string} the enharmonic note or '' if not valid note\r\n * @example\r\n * Note.enharmonic(\"Db\") // => \"C#\"\r\n * Note.enharmonic(\"C\") // => \"C\"\r\n */\r\nconst enharmonic = nameBuilder(false);\r\nfunction nameBuilder(sameAccidentals) {\r\n    return (noteName) => {\r\n        const note = properties(noteName);\r\n        if (note.empty) {\r\n            return \"\";\r\n        }\r\n        const sharps = sameAccidentals ? note.alt > 0 : note.alt < 0;\r\n        const pitchClass = note.midi === null;\r\n        return midiToNoteName(note.midi || note.chroma, { sharps, pitchClass });\r\n    };\r\n}\r\nvar index = {\r\n    properties,\r\n    name,\r\n    pitchClass,\r\n    accidentals,\r\n    octave,\r\n    midi,\r\n    fromMidi,\r\n    fromMidiSharps,\r\n    freq,\r\n    chroma,\r\n    transpose,\r\n    tr,\r\n    transposeBy,\r\n    trBy,\r\n    transposeFrom,\r\n    trFrom,\r\n    transposeFifths,\r\n    trFifths,\r\n    simplify,\r\n    enharmonic\r\n};\n\nexport default index;\nexport { accidentals, chroma, enharmonic, freq, fromMidi, fromMidiSharps, midi, name, octave, pitchClass, properties, simplify, tr, trBy, trFifths, trFrom, transpose, transposeBy, transposeFifths, transposeFrom };\n//# sourceMappingURL=index.esnext.js.map\n","import { isPitch, altToAcc, isNamed, accToAlt, interval } from '@tonaljs/core';\n\nconst NoRomanNumeral = { empty: true, name: \"\", chordType: \"\" };\r\nconst cache = {};\r\n/**\r\n * Get properties of a roman numeral string\r\n *\r\n * @function\r\n * @param {string} - the roman numeral string (can have type, like: Imaj7)\r\n * @return {Object} - the roman numeral properties\r\n * @param {string} name - the roman numeral (tonic)\r\n * @param {string} type - the chord type\r\n * @param {string} num - the number (1 = I, 2 = II...)\r\n * @param {boolean} major - major or not\r\n *\r\n * @example\r\n * romanNumeral(\"VIIb5\") // => { name: \"VII\", type: \"b5\", num: 7, major: true }\r\n */\r\nfunction romanNumeral(src) {\r\n    return typeof src === \"string\"\r\n        ? cache[src] || (cache[src] = parse(src))\r\n        : typeof src === \"number\"\r\n            ? romanNumeral(NAMES[src] || \"\")\r\n            : isPitch(src)\r\n                ? fromPitch(src)\r\n                : isNamed(src)\r\n                    ? romanNumeral(src.name)\r\n                    : NoRomanNumeral;\r\n}\r\n/**\r\n * Get roman numeral names\r\n *\r\n * @function\r\n * @param {boolean} [isMajor=true]\r\n * @return {Array<String>}\r\n *\r\n * @example\r\n * names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\r\n */\r\nfunction names(major = true) {\r\n    return (major ? NAMES : NAMES_MINOR).slice();\r\n}\r\nfunction fromPitch(pitch) {\r\n    return romanNumeral(altToAcc(pitch.alt) + NAMES[pitch.step]);\r\n}\r\nconst REGEX = /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\r\nfunction tokenize(str) {\r\n    return (REGEX.exec(str) || [\"\", \"\", \"\", \"\"]);\r\n}\r\nconst ROMANS = \"I II III IV V VI VII\";\r\nconst NAMES = ROMANS.split(\" \");\r\nconst NAMES_MINOR = ROMANS.toLowerCase().split(\" \");\r\nfunction parse(src) {\r\n    const [name, acc, roman, chordType] = tokenize(src);\r\n    if (!roman) {\r\n        return NoRomanNumeral;\r\n    }\r\n    const upperRoman = roman.toUpperCase();\r\n    const step = NAMES.indexOf(upperRoman);\r\n    const alt = accToAlt(acc);\r\n    const dir = 1;\r\n    return {\r\n        empty: false,\r\n        name,\r\n        roman,\r\n        interval: interval({ step, alt, dir }).name,\r\n        acc,\r\n        chordType,\r\n        alt,\r\n        step,\r\n        major: roman === upperRoman,\r\n        oct: 0,\r\n        dir\r\n    };\r\n}\n\nexport { names, romanNumeral, tokenize };\n//# sourceMappingURL=index.esnext.js.map\n","import { transpose, altToAcc, accToAlt, note } from '@tonaljs/core';\nimport { transposeFifths } from '@tonaljs/note';\nimport { romanNumeral } from '@tonaljs/roman-numeral';\n\nconst mapToScale = (scale) => (symbols, sep = \"\") => symbols.map((symbol, index) => symbol !== \"-\" ? scale[index] + sep + symbol : \"\");\r\nfunction keyScale(gradesLiteral, chordsLiteral, hfLiteral, chordScalesLiteral) {\r\n    return (tonic) => {\r\n        const grades = gradesLiteral.split(\" \");\r\n        const intervals = grades.map(gr => romanNumeral(gr).interval || \"\");\r\n        const scale = intervals.map(interval => transpose(tonic, interval));\r\n        const map = mapToScale(scale);\r\n        return {\r\n            tonic,\r\n            grades,\r\n            intervals,\r\n            scale,\r\n            chords: map(chordsLiteral.split(\" \")),\r\n            chordsHarmonicFunction: hfLiteral.split(\" \"),\r\n            chordScales: map(chordScalesLiteral.split(\",\"), \" \")\r\n        };\r\n    };\r\n}\r\nconst distInFifths = (from, to) => {\r\n    const f = note(from);\r\n    const t = note(to);\r\n    return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];\r\n};\r\nconst MajorScale = keyScale(\"I II III IV V VI VII\", \"maj7 m7 m7 maj7 7 m7 m7b5\", \"T SD T SD D T D\", \"major,dorian,phrygian,lydian,mixolydian,minor,locrian\");\r\nconst NaturalScale = keyScale(\"I II bIII IV V bVI bVII\", \"m7 m7b5 maj7 m7 m7 maj7 7\", \"T SD T SD D SD SD\", \"minor,locrian,major,dorian,phrygian,lydian,mixolydian\");\r\nconst HarmonicScale = keyScale(\"I II bIII IV V bVI VII\", \"mmaj7 m7b5 +maj7 m7 7 maj7 mo7\", \"T SD T SD D SD D\", \"harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian\");\r\nconst MelodicScale = keyScale(\"I II bIII IV V VI VII\", \"m6 m7 +maj7 7 7 m7b5 m7b5\", \"T SD T SD D - -\", \"melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered\");\r\n/**\r\n * Get a major key properties in a given tonic\r\n * @param tonic\r\n */\r\nfunction majorKey(tonic) {\r\n    const keyScale = MajorScale(tonic);\r\n    const alteration = distInFifths(\"C\", tonic);\r\n    const map = mapToScale(keyScale.scale);\r\n    return {\r\n        ...keyScale,\r\n        type: \"major\",\r\n        minorRelative: transpose(tonic, \"-3m\"),\r\n        alteration,\r\n        keySignature: altToAcc(alteration),\r\n        secondaryDominants: map(\"- VI7 VII7 I7 II7 III7 -\".split(\" \")),\r\n        secondaryDominantsMinorRelative: map(\"- IIIm7b5 IV#m7 Vm7 VIm7 VIIm7b5 -\".split(\" \")),\r\n        substituteDominants: map(\"- bIII7 IV7 bV7 bVI7 bVII7 -\".split(\" \")),\r\n        substituteDominantsMinorRelative: map(\"- IIIm7 Im7 IIbm7 VIm7 IVm7 -\".split(\" \"))\r\n    };\r\n}\r\n/**\r\n * Get minor key properties in a given tonic\r\n * @param tonic\r\n */\r\nfunction minorKey(tonic) {\r\n    const alteration = distInFifths(\"C\", tonic) - 3;\r\n    return {\r\n        type: \"minor\",\r\n        tonic,\r\n        relativeMajor: transpose(tonic, \"3m\"),\r\n        alteration,\r\n        keySignature: altToAcc(alteration),\r\n        natural: NaturalScale(tonic),\r\n        harmonic: HarmonicScale(tonic),\r\n        melodic: MelodicScale(tonic)\r\n    };\r\n}\r\n/**\r\n * Given a key signature, returns the tonic of the major key\r\n * @param sigature\r\n * @example\r\n * majorTonicFromKeySignature('###') // => 'A'\r\n */\r\nfunction majorTonicFromKeySignature(sig) {\r\n    if (typeof sig === \"number\") {\r\n        return transposeFifths(\"C\", sig);\r\n    }\r\n    else if (typeof sig === \"string\" && /^b+|#+$/.test(sig)) {\r\n        return transposeFifths(\"C\", accToAlt(sig));\r\n    }\r\n    return null;\r\n}\n\nexport { majorKey, majorTonicFromKeySignature, minorKey };\n//# sourceMappingURL=index.esnext.js.map\n","import { chromaToIntervals, EmptyPcset } from '@tonaljs/pcset';\n\nconst DATA = [\r\n    [0, 2773, 0, \"ionian\", \"\", \"Maj7\", \"major\"],\r\n    [1, 2902, 2, \"dorian\", \"m\", \"m7\"],\r\n    [2, 3418, 4, \"phrygian\", \"m\", \"m7\"],\r\n    [3, 2741, -1, \"lydian\", \"\", \"Maj7\"],\r\n    [4, 2774, 1, \"mixolydian\", \"\", \"7\"],\r\n    [5, 2906, 3, \"aeolian\", \"m\", \"m7\", \"minor\"],\r\n    [6, 3434, 5, \"locrian\", \"dim\", \"m7b5\"]\r\n];\n\nconst NoMode = {\r\n    ...EmptyPcset,\r\n    name: \"\",\r\n    alt: 0,\r\n    modeNum: NaN,\r\n    triad: \"\",\r\n    seventh: \"\",\r\n    aliases: []\r\n};\r\nconst all = DATA.map(toMode);\r\nconst index = {};\r\nall.forEach(mode => {\r\n    index[mode.name] = mode;\r\n    mode.aliases.forEach(alias => {\r\n        index[alias] = mode;\r\n    });\r\n});\r\n/**\r\n * Get a Mode by it's name\r\n *\r\n * @example\r\n * mode('dorian')\r\n * // =>\r\n * // {\r\n * //   intervals: [ '1P', '2M', '3m', '4P', '5P', '6M', '7m' ],\r\n * //   modeNum: 1,\r\n * //   chroma: '101101010110',\r\n * //   normalized: '101101010110',\r\n * //   name: 'dorian',\r\n * //   setNum: 2902,\r\n * //   alt: 2,\r\n * //   triad: 'm',\r\n * //   seventh: 'm7',\r\n * //   aliases: []\r\n * // }\r\n */\r\nfunction mode(name) {\r\n    return typeof name === \"string\"\r\n        ? index[name.toLowerCase()] || NoMode\r\n        : name && name.name\r\n            ? mode(name.name)\r\n            : NoMode;\r\n}\r\n/**\r\n * Get a list of all know modes\r\n */\r\nfunction entries() {\r\n    return all.slice();\r\n}\r\nfunction toMode(mode) {\r\n    const [modeNum, setNum, alt, name, triad, seventh, alias] = mode;\r\n    const aliases = alias ? [alias] : [];\r\n    const chroma = Number(setNum).toString(2);\r\n    const intervals = chromaToIntervals(chroma);\r\n    return {\r\n        empty: false,\r\n        intervals,\r\n        modeNum,\r\n        chroma,\r\n        normalized: chroma,\r\n        name,\r\n        setNum,\r\n        alt,\r\n        triad,\r\n        seventh,\r\n        aliases\r\n    };\r\n}\n\nexport { entries, mode };\n//# sourceMappingURL=index.esnext.js.map\n","import { tokenize } from '@tonaljs/chord';\nimport { transpose, interval, distance } from '@tonaljs/core';\nimport { romanNumeral } from '@tonaljs/roman-numeral';\n\n/**\r\n * Given a tonic and a chord list expressed with roman numeral notation\r\n * returns the progression expressed with leadsheet chords symbols notation\r\n * @example\r\n * fromRomanNumerals(\"C\", [\"I\", \"IIm7\", \"V7\"]);\r\n * // => [\"C\", \"Dm7\", \"G7\"]\r\n */\r\nfunction fromRomanNumerals(tonic, chords) {\r\n    const romanNumerals = chords.map(romanNumeral);\r\n    return romanNumerals.map(rn => transpose(tonic, interval(rn)) + rn.chordType);\r\n}\r\n/**\r\n * Given a tonic and a chord list with leadsheet symbols notation,\r\n * return the chord list with roman numeral notation\r\n * @example\r\n * toRomanNumerals(\"C\", [\"CMaj7\", \"Dm7\", \"G7\"]);\r\n * // => [\"IMaj7\", \"IIm7\", \"V7\"]\r\n */\r\nfunction toRomanNumerals(tonic, chords) {\r\n    return chords.map(chord => {\r\n        const [note, chordType] = tokenize(chord);\r\n        const intervalName = distance(tonic, note);\r\n        const roman = romanNumeral(interval(intervalName));\r\n        return roman.name + chordType;\r\n    });\r\n}\n\nexport { fromRomanNumerals, toRomanNumerals };\n//# sourceMappingURL=index.esnext.js.map\n","import { compact, range } from '@tonaljs/array';\nimport { toMidi, midiToNoteName } from '@tonaljs/midi';\n\n/**\r\n * Create a numeric range. You supply a list of notes or numbers and it will\r\n * be conected to create complex ranges.\r\n *\r\n * @param {Array} array - the list of notes or numbers used\r\n * @return {Array} an array of numbers or empty array if not vald parameters\r\n *\r\n * @example\r\n * numeric([\"C5\", \"C4\"]) // => [ 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60 ]\r\n * // it works midi notes\r\n * numeric([10, 5]) // => [ 10, 9, 8, 7, 6, 5 ]\r\n * // complex range\r\n * numeric([\"C4\", \"E4\", \"Bb3\"]) // => [60, 61, 62, 63, 64, 63, 62, 61, 60, 59, 58]\r\n */\r\nfunction numeric(notes) {\r\n    const midi = compact(notes.map(toMidi));\r\n    if (!notes.length || midi.length !== notes.length) {\r\n        // there is no valid notes\r\n        return [];\r\n    }\r\n    return midi.reduce((result, note) => {\r\n        const last = result[result.length - 1];\r\n        return result.concat(range(last, note).slice(1));\r\n    }, [midi[0]]);\r\n}\r\n/**\r\n * Create a range of chromatic notes. The altered notes will use flats.\r\n *\r\n * @function\r\n * @param {String|Array} list - the list of notes or midi note numbers\r\n * @return {Array} an array of note names\r\n *\r\n * @example\r\n * Range.chromatic(\"C2 E2 D2\") // => [\"C2\", \"Db2\", \"D2\", \"Eb2\", \"E2\", \"Eb2\", \"D2\"]\r\n * // with sharps\r\n * Range.chromatic(\"C2 C3\", true) // => [ \"C2\", \"C#2\", \"D2\", \"D#2\", \"E2\", \"F2\", \"F#2\", \"G2\", \"G#2\", \"A2\", \"A#2\", \"B2\", \"C3\" ]\r\n */\r\nfunction chromatic(notes, options) {\r\n    return numeric(notes).map(midi => midiToNoteName(midi, options));\r\n}\n\nexport { chromatic, numeric };\n//# sourceMappingURL=index.esnext.js.map\n","import { sortedUniqNoteNames, rotate } from '@tonaljs/array';\nimport { entries } from '@tonaljs/chord-dictionary';\nimport { note, transpose } from '@tonaljs/core';\nimport { isSubsetOf, isSupersetOf, modes } from '@tonaljs/pcset';\nimport { get, entries as entries$1 } from '@tonaljs/scale-dictionary';\n\n/**\r\n * References:\r\n * - https://www.researchgate.net/publication/327567188_An_Algorithm_for_Spelling_the_Pitches_of_Any_Musical_Scale\r\n * @module scale\r\n */\r\nconst NoScale = {\r\n    empty: true,\r\n    name: \"\",\r\n    type: \"\",\r\n    tonic: null,\r\n    setNum: NaN,\r\n    chroma: \"\",\r\n    normalized: \"\",\r\n    aliases: [],\r\n    notes: [],\r\n    intervals: []\r\n};\r\n/**\r\n * Given a string with a scale name and (optionally) a tonic, split\r\n * that components.\r\n *\r\n * It retuns an array with the form [ name, tonic ] where tonic can be a\r\n * note name or null and name can be any arbitrary string\r\n * (this function doesn\"t check if that scale name exists)\r\n *\r\n * @function\r\n * @param {string} name - the scale name\r\n * @return {Array} an array [tonic, name]\r\n * @example\r\n * tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\r\n * tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\r\n * tokenize() // => [\"\", \"\"]\r\n */\r\nfunction tokenize(name) {\r\n    if (typeof name !== \"string\") {\r\n        return [\"\", \"\"];\r\n    }\r\n    const i = name.indexOf(\" \");\r\n    const tonic = note(name.substring(0, i));\r\n    if (tonic.empty) {\r\n        const n = note(name);\r\n        return n.empty ? [\"\", name] : [n.name, \"\"];\r\n    }\r\n    const type = name.substring(tonic.name.length + 1);\r\n    return [tonic.name, type.length ? type : \"\"];\r\n}\r\n/**\r\n * Get a Scale from a scale name.\r\n */\r\nfunction scale(src) {\r\n    const tokens = Array.isArray(src) ? src : tokenize(src);\r\n    const tonic = note(tokens[0]).name;\r\n    const st = get(tokens[1]);\r\n    if (st.empty) {\r\n        return NoScale;\r\n    }\r\n    const type = st.name;\r\n    const notes = tonic\r\n        ? st.intervals.map(i => transpose(tonic, i))\r\n        : [];\r\n    const name = tonic ? tonic + \" \" + type : type;\r\n    return { ...st, name, type, tonic, notes };\r\n}\r\n/**\r\n * Get all chords that fits a given scale\r\n *\r\n * @function\r\n * @param {string} name - the scale name\r\n * @return {Array<string>} - the chord names\r\n *\r\n * @example\r\n * scaleChords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\r\n */\r\nfunction scaleChords(name) {\r\n    const s = scale(name);\r\n    const inScale = isSubsetOf(s.chroma);\r\n    return entries()\r\n        .filter(chord => inScale(chord.chroma))\r\n        .map(chord => chord.aliases[0]);\r\n}\r\n/**\r\n * Get all scales names that are a superset of the given one\r\n * (has the same notes and at least one more)\r\n *\r\n * @function\r\n * @param {string} name\r\n * @return {Array} a list of scale names\r\n * @example\r\n * extended(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\r\n */\r\nfunction extended(name) {\r\n    const s = scale(name);\r\n    const isSuperset = isSupersetOf(s.chroma);\r\n    return entries$1()\r\n        .filter(scale => isSuperset(scale.chroma))\r\n        .map(scale => scale.name);\r\n}\r\n/**\r\n * Find all scales names that are a subset of the given one\r\n * (has less notes but all from the given scale)\r\n *\r\n * @function\r\n * @param {string} name\r\n * @return {Array} a list of scale names\r\n *\r\n * @example\r\n * reduced(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\r\n */\r\nfunction reduced(name) {\r\n    const isSubset = isSubsetOf(scale(name).chroma);\r\n    return entries$1()\r\n        .filter(scale => isSubset(scale.chroma))\r\n        .map(scale => scale.name);\r\n}\r\n/**\r\n * Given an array of notes, return the scale: a pitch class set starting from\r\n * the first note of the array\r\n *\r\n * @function\r\n * @param {string[]} notes\r\n * @return {string[]} pitch classes with same tonic\r\n * @example\r\n * scaleNotes(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\r\n * scaleNotes(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\r\n */\r\nfunction scaleNotes(notes) {\r\n    const pcset = notes.map(n => note(n).pc).filter(x => x);\r\n    const tonic = pcset[0];\r\n    const scale = sortedUniqNoteNames(pcset);\r\n    return rotate(scale.indexOf(tonic), scale);\r\n}\r\n/**\r\n * Find mode names of a scale\r\n *\r\n * @function\r\n * @param {string} name - scale name\r\n * @example\r\n * modeNames(\"C pentatonic\") // => [\r\n *   [\"C\", \"major pentatonic\"],\r\n *   [\"D\", \"egyptian\"],\r\n *   [\"E\", \"malkos raga\"],\r\n *   [\"G\", \"ritusen\"],\r\n *   [\"A\", \"minor pentatonic\"]\r\n * ]\r\n */\r\nfunction modeNames(name) {\r\n    const s = scale(name);\r\n    if (s.empty) {\r\n        return [];\r\n    }\r\n    const tonics = s.tonic ? s.notes : s.intervals;\r\n    return modes(s.chroma)\r\n        .map((chroma, i) => {\r\n        const modeName = scale(chroma).name;\r\n        return modeName ? [tonics[i], modeName] : [\"\", \"\"];\r\n    })\r\n        .filter(x => x[0]);\r\n}\n\nexport { extended, modeNames, reduced, scale, scaleChords, scaleNotes, tokenize };\n//# sourceMappingURL=index.esnext.js.map\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@tonaljs/abc-notation'), require('@tonaljs/array'), require('@tonaljs/chord'), require('@tonaljs/chord-dictionary'), require('@tonaljs/core'), require('@tonaljs/interval'), require('@tonaljs/key'), require('@tonaljs/midi'), require('@tonaljs/mode'), require('@tonaljs/note'), require('@tonaljs/pcset'), require('@tonaljs/progression'), require('@tonaljs/range'), require('@tonaljs/roman-numeral'), require('@tonaljs/scale'), require('@tonaljs/scale-dictionary')) :\n  typeof define === 'function' && define.amd ? define(['exports', '@tonaljs/abc-notation', '@tonaljs/array', '@tonaljs/chord', '@tonaljs/chord-dictionary', '@tonaljs/core', '@tonaljs/interval', '@tonaljs/key', '@tonaljs/midi', '@tonaljs/mode', '@tonaljs/note', '@tonaljs/pcset', '@tonaljs/progression', '@tonaljs/range', '@tonaljs/roman-numeral', '@tonaljs/scale', '@tonaljs/scale-dictionary'], factory) :\n  (global = global || self, factory(global.Tonal = {}, global.abcNotation, global.array, global.chord, global.chordDictionary, global.Core, global.interval, global.key, global.midi, global.mode, global.note, global.pcset, global.progression, global.range, global.romanNumeral, global.scale, global.scaleDictionary));\n}(this, (function (exports, abcNotation, array, chord, chordDictionary, Core, interval, key, midi, mode, note, pcset, progression, range, romanNumeral, scale, scaleDictionary) { 'use strict';\n\n  // backwards compatibility\r\n  var Tonal = Core;\n\n  Object.keys(Core).forEach(function (k) {\n    if (k !== 'default') Object.defineProperty(exports, k, {\n      enumerable: true,\n      get: function () {\n        return Core[k];\n      }\n    });\n  });\n  exports.AbcNotation = abcNotation;\n  exports.Array = array;\n  exports.Chord = chord;\n  exports.ChordDictionary = chordDictionary;\n  exports.Core = Core;\n  exports.Interval = interval;\n  exports.Key = key;\n  exports.Midi = midi;\n  exports.Mode = mode;\n  exports.Note = note;\n  exports.PcSet = pcset;\n  exports.Progression = progression;\n  exports.Range = range;\n  exports.RomanNumeral = romanNumeral;\n  exports.Scale = scale;\n  exports.ScaleDictionary = scaleDictionary;\n  exports.Tonal = Tonal;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=index.es5.js.map\n"],"names":["isNamed","src","name","isPitch","pitch","step","alt","FIFTHS","STEPS_TO_OCTS","map","fifths","Math","floor","encode","oct","dir","f","undefined","FIFTHS_TO_STEPS","decode","coord","o","i","unaltered","NoNote","empty","pc","acc","cache","Map","fillStr","s","n","Array","join","stepToLetter","charAt","altToAcc","accToAlt","length","note","cached","get","value","noteName","tokens","tokenizeNote","letter","octStr","charCodeAt","chroma","SEMI","height","midi","freq","pow","parse","props","pitchName","set","REGEX","str","m","exec","toUpperCase","replace","coordToNote","noteCoord","NoInterval","REGEX$1","RegExp","tokenizeInterval","cache$1","interval","num","q","abs","t","type","simple","test","qToAlt","semitones","SIZES","parse$1","fillStr$1","altToQ","pitchName$1","coordToInterval","transpose","intervalName","note$1","interval$1","intervalCoord","distance","fromNote","toNote","from","to","fcoord","tcoord","character","times","tokenize","abcToScientificNotation","a","scientificToAbcNotation","toLowerCase","transpose$1","range","b","ascR","descR","rotate","arr","len","slice","concat","compact","filter","sortedNoteNames","notes","sort","sortedUniqNoteNames","permutations","reduce","perm","e","pos","newPerm","splice","rnd","random","EmptyPcset","setNum","normalized","intervals","setNumToChroma","Number","toString","chromaToNumber","parseInt","isChroma","[object Object]","pcset","isArray","binary","listToChroma","isPcset","normalizedNum","split","_","chromaRotations","chromaToIntervals","chromaToPcset","IVLS","push","all","modes","normalize","r","isSubsetOf","isSupersetOf","isNoteIncludedInSet","includes","isIncluded","s1","s2","NoChordType","quality","aliases","chords","index","entries","add","fullName","has","indexOf","getQuality","chord","forEach","alias","addAlias","ivls","names","console","warn","Object","keys","NoScaleType","scales","scale","NoChord","tonic","NaN","NUM_TYPES","findChord","isChordIncluded","chordName","isSuperset","entries$1","isSubset","properties","IN","IQ","combinator","substract","fromSemitones","d","c","invert","simplify","addTo","other","fn","coordA","coordB","isMidi","arg","toMidi","L2","log","L440","SHARPS","FLATS","midiToNoteName","options","round","sharps","pitchClass","v","tuning","tr","transposeBy","trBy","transposeFrom","trFrom","transposeFifths","nFifths","nOcts","trFifths","nameBuilder","enharmonic","sameAccidentals","accidentals","octave","fromMidi","fromMidiSharps","NoRomanNumeral","chordType","romanNumeral","roman","upperRoman","NAMES","major","ROMANS","NAMES_MINOR","mapToScale","symbols","sep","symbol","keyScale","gradesLiteral","chordsLiteral","hfLiteral","chordScalesLiteral","grades","gr","chordsHarmonicFunction","chordScales","distInFifths","MajorScale","NaturalScale","HarmonicScale","MelodicScale","alteration","minorRelative","keySignature","secondaryDominants","secondaryDominantsMinorRelative","substituteDominants","substituteDominantsMinorRelative","sig","relativeMajor","natural","harmonic","melodic","NoMode","modeNum","triad","seventh","mode","rn","numeric","result","last","NoScale","substring","st","tonics","modeName","x","inScale","exports","abcNotation","array","chordDictionary","Core","key","progression","scaleDictionary","Tonal","k","defineProperty","enumerable","AbcNotation","Chord","ChordDictionary","Interval","Key","Midi","Mode","Note","PcSet","Progression","Range","RomanNumeral","Scale","ScaleDictionary","factory","require$$0","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","require$$10","require$$11","require$$12","require$$13","require$$14","require$$15"],"mappings":"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"}